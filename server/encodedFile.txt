﻿<?xml version="1.0" encoding="utf-8"?>
<Report ScriptLanguage="CSharp" StartReportEvent="_StartReport" ReportInfo.Created="11/30/2024 16:08:44" ReportInfo.Modified="11/30/2024 22:00:38" ReportInfo.CreatorVersion="2020.4.0.0">
  <ScriptText>  using System;
  using System.Collections;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Windows.Forms;
  using System.Drawing;
  using System.Data;
  using FastReport;
  using FastReport.Data;
  using FastReport.Dialog;
  using FastReport.Barcode;
  using FastReport.Table;
  using FastReport.Utils;
namespace FastReport
{
  public class ReportScript
  {
     
            

    private void Page1_StartPage(object sender, EventArgs e)
    {
      
      // получаем ссылку на источник данных
      DataSourceBase ds = Report.GetDataSource(&quot;JSON&quot;);
      // инициализируем его
      
      
    
      // Получаем сам элемент JSON (получаем объект по индексу)
      JsonBase item = (JsonBase)Report.GetColumnValue(&quot;JSON.item&quot;);
    
      
      List&lt;string&gt; imageLocationsList = new List&lt;string&gt;{};  
      // Преобразуем массив в список для удобства добавления элементов
      while (ds.HasMoreRows)
      {
        // получаем значение поля для текущей записи источника
        string imagePath = ((String)Report.GetColumnValue(&quot;JSON.item.image&quot;));
                            
        imageLocationsList.Add(imagePath);
        ds.Next();
      }
      
      

      
      
      
      // Параметры строк и колонок
      int rows = 2;
      int columns = 2;
      
      
      //Создаем окно
      Page1.ReportTitle = new ReportTitleBand();                                            
      Page1.ReportTitle.Name = &quot;ReportTitle1&quot;;
 
      
      
      // Размеры страницы (A4)
      float pageWidth = Units.Millimeters * 210;
      float pageHeight = Units.Millimeters * 297;
      
      
      
      
      // Вычисляем размеры ячейки
      float cellWidth = pageWidth / columns;
      float cellHeight = pageHeight / rows;
      
      // Добавляем изображения в ячейки
      for (int row = 0; row &lt; rows; row++)
      {
        
        for (int col = 0; col &lt; columns; col++)
        {
          // Выбираем изображение, используя индекс с циклом (для повторения)
          
          //string imageLocation = imageLocations[(row * columns + col) % imageLocations.Length];
          //string imageLocation = imageLocations[row];
          // string imageLocation = imageLocations[col % imageLocations.Length];
          string imageLocation = imageLocationsList[(row * columns + col) % imageLocationsList.Count];
         
          
          // Создаем PictureObject
          PictureObject picture = new PictureObject();
          // picture.Name = string.Format(&quot;Picture_{0}_{1}&quot;, row, col);

          picture.ImageLocation = imageLocation;
          picture.Left = cellWidth * col;
          picture.Top = cellHeight * row;
          picture.Width = cellWidth;
          picture.Height = cellHeight;
          picture.SizeMode = PictureBoxSizeMode.StretchImage;
          //picture.Angle = 270;
          
          
          // Добавляем изображение в ReportTitleBand
          Page1.ReportTitle.Objects.Add(picture);
        }
      }      
      
      
      
      
      
      
   

      }

      }
  }            
</ScriptText>
  <Dictionary>
    <JsonDataSourceConnection Name="Connection" ConnectionString="rijcmlqPjyILZ9lwQcEJ+ypxupQF7nb2oNG3xdaDYdrwmejdXGnHkSiqUIbzQv9+WpVvyjFpxa5jyOeGS+2NoUrnyP8dWXnT6Nm1UdFWu81Lt9gXtpJBQXysPNODlcyfWXz7nIyvX8tu4cKhQ6W8sVDliZs8GSS22d8rdGcMNS3HkrT5YRRD2/Smku05b6VL+9+e//V3EqQUI3fmASt/U/7luehvnzE+nYtRGpM6VDZFaF2oWZUochv92oYckDmMDXxy8BGmUMclumLC66CTeZUdBaVAmCx9ZfPl1zglQkgl7jMbWjRC5NmoxqgXsBsKqF066Uz4WPVxvEK94XTWjn/NcBrGw991GHZZSV7Ls5HM4hcf9zD5m6YMvFJPDfMzrZQNFMS6uAaXK3NFD9INyja2NoHIXPoPdGYQ4tONKxWr8fg9z8IZYVoDWpmIQrdFffpGPuKixtFRlgSwj+upUR1EFZI2hoSSQvfYkzOLgc5/8rMwJBwniDJQxvEocoPLbw+qoUpaMW0erjWRaZ4RLr+nR1g+8abmoGh7Q+ji7KRx82UhAt1oHmcZx9V9WYNIr9CqB5P">
      <JsonTableDataSource Name="JSON" DataType="FastReport.Data.JsonConnection.JsonParser.JsonArray" Enabled="true" TableName="JSON">
        <Column Name="index" DataType="System.Int32"/>
        <Column Name="item" DataType="FastReport.JsonBase">
          <Column Name="id" DataType="System.Double"/>
          <Column Name="image" DataType="System.String"/>
          <Column Name="description" DataType="System.String"/>
        </Column>
        <Column Name="array" DataType="FastReport.JsonBase"/>
      </JsonTableDataSource>
    </JsonDataSourceConnection>
  </Dictionary>
  <ReportPage Name="Page1" LeftMargin="0" TopMargin="0" RightMargin="0" BottomMargin="0" Watermark.Font="Arial, 60pt" StartPageEvent="Page1_StartPage">
    <ReportTitleBand Name="ReportTitle1" Width="793.8" Height="37.8"/>
  </ReportPage>
</Report>
